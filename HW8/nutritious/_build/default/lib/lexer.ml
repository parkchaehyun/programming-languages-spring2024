# 7 "lib/lexer.mll"
 
 open Parser
 open Error
 let debug_tag = false
 let verbose s =  if debug_tag then (print_string s; print_newline())
 let comment_depth = ref 0
 let keyword_tbl = Hashtbl.create 31
 let _ = List.iter (fun (keyword, tok) -> Hashtbl.add keyword_tbl keyword tok)
                   [("true", TRUE);
                    ("false", FALSE);
                    ("and", AND);
                    ("or", OR);
                    ("if", IF);
                    ("then",THEN);
                    ("else",ELSE);
                    ("let", LET);
                    ("in", IN);
                    ("end", END);
                    ("fn", FN);
                    ("read" , READ);
                    ("rec" , REC);
                    ("write", WRITE);
                    ("malloc", MALLOC);
                    ("val", VAL)
                  ]

     let s2int = function "" -> raise (Lex_err("illegal number token", get_ln()))
       		   | s -> if ('~' = String.get s 0) then
                   - (int_of_string(String.sub s 1 ((String.length s)-1)))
                   else int_of_string s

# 34 "lib/lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\236\255\237\255\238\255\239\255\241\255\242\255\243\255\
    \000\000\002\000\247\255\000\000\249\255\001\000\084\000\159\000\
    \169\000\253\255\002\000\005\000\254\255\179\000\250\255\005\000\
    \248\255\246\255\245\255\135\000\250\255\006\000\252\255\253\255\
    \006\000\018\000\255\255\254\255\251\255";
  Lexing.lex_backtrk = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \011\000\019\000\255\255\015\000\255\255\019\000\004\000\019\000\
    \003\000\255\255\019\000\000\000\255\255\003\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\005\000\255\255\255\255\
    \005\000\005\000\255\255\255\255\255\255";
  Lexing.lex_default = 
   "\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \255\255\255\255\000\000\255\255\000\000\023\000\255\255\255\255\
    \255\255\000\000\255\255\255\255\000\000\255\255\000\000\023\000\
    \000\000\000\000\000\000\028\000\000\000\255\255\000\000\000\000\
    \255\255\255\255\000\000\000\000\000\000";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\019\000\017\000\255\255\020\000\018\000\019\000\255\255\
    \036\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \019\000\005\000\013\000\022\000\000\000\019\000\000\000\022\000\
    \011\000\004\000\024\000\007\000\002\000\006\000\003\000\035\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\009\000\010\000\034\000\008\000\026\000\025\000\
    \000\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\000\000\000\000\015\000\000\000\
    \000\000\000\000\000\000\000\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\000\000\000\000\
    \000\000\030\000\000\000\000\000\029\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\033\000\
    \000\000\032\000\000\000\014\000\000\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \012\000\255\255\000\000\000\000\000\000\255\255\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\031\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\013\000\018\000\000\000\019\000\023\000\
    \029\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\013\000\255\255\019\000\255\255\023\000\
    \000\000\000\000\011\000\000\000\000\000\000\000\000\000\032\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\033\000\000\000\008\000\009\000\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\014\000\255\255\255\255\000\000\255\255\
    \255\255\255\255\255\255\255\255\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\255\255\255\255\
    \255\255\027\000\255\255\255\255\027\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\027\000\
    \255\255\027\000\255\255\014\000\255\255\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\013\000\255\255\255\255\255\255\023\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\027\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec start lexbuf =
    __ocaml_lex_start_rec lexbuf 0
and __ocaml_lex_start_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 45 "lib/lexer.mll"
             ( start lexbuf )
# 187 "lib/lexer.ml"

  | 1 ->
# 46 "lib/lexer.mll"
                  ( incr_ln (); start lexbuf)
# 192 "lib/lexer.ml"

  | 2 ->
# 47 "lib/lexer.mll"
                  ( incr_ln (); start lexbuf)
# 197 "lib/lexer.ml"

  | 3 ->
# 48 "lib/lexer.mll"
              ( NUM (s2int(Lexing.lexeme lexbuf)) )
# 202 "lib/lexer.ml"

  | 4 ->
# 49 "lib/lexer.mll"
          ( let id = Lexing.lexeme lexbuf
            in try Hashtbl.find keyword_tbl id
               with _ -> ID id
            )
# 210 "lib/lexer.ml"

  | 5 ->
# 53 "lib/lexer.mll"
                  ( STRING(Lexing.lexeme lexbuf) )
# 215 "lib/lexer.ml"

  | 6 ->
# 54 "lib/lexer.mll"
           ( verbose "eof"; EOF)
# 220 "lib/lexer.ml"

  | 7 ->
# 55 "lib/lexer.mll"
            ( comment_depth :=1;
              comment lexbuf;
              start lexbuf )
# 227 "lib/lexer.ml"

  | 8 ->
# 58 "lib/lexer.mll"
           ( verbose ";"; SEMICOLON)
# 232 "lib/lexer.ml"

  | 9 ->
# 59 "lib/lexer.mll"
            ( verbose ":="; COLONEQ)
# 237 "lib/lexer.ml"

  | 10 ->
# 60 "lib/lexer.mll"
            ( verbose "=>"; RARROW)
# 242 "lib/lexer.ml"

  | 11 ->
# 61 "lib/lexer.mll"
           (verbose "="; EQUAL)
# 247 "lib/lexer.ml"

  | 12 ->
# 62 "lib/lexer.mll"
           (verbose "+"; PLUS)
# 252 "lib/lexer.ml"

  | 13 ->
# 63 "lib/lexer.mll"
           (verbose "-"; MINUS)
# 257 "lib/lexer.ml"

  | 14 ->
# 64 "lib/lexer.mll"
           (verbose "!"; BANG)
# 262 "lib/lexer.ml"

  | 15 ->
# 65 "lib/lexer.mll"
           ( verbose "("; LP)
# 267 "lib/lexer.ml"

  | 16 ->
# 66 "lib/lexer.mll"
           ( verbose ")"; RP)
# 272 "lib/lexer.ml"

  | 17 ->
# 67 "lib/lexer.mll"
           ( verbose "."; DOT)
# 277 "lib/lexer.ml"

  | 18 ->
# 68 "lib/lexer.mll"
           ( verbose ","; COMMA)
# 282 "lib/lexer.ml"

  | 19 ->
# 69 "lib/lexer.mll"
         (raise (Lex_err("illical token "^(Lexing.lexeme lexbuf), get_ln())))
# 287 "lib/lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_start_rec lexbuf __ocaml_lex_state

and comment lexbuf =
    __ocaml_lex_comment_rec lexbuf 27
and __ocaml_lex_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 72 "lib/lexer.mll"
          (comment_depth := !comment_depth+1; comment lexbuf)
# 299 "lib/lexer.ml"

  | 1 ->
# 73 "lib/lexer.mll"
          (comment_depth := !comment_depth-1;
           if !comment_depth > 0 then comment lexbuf )
# 305 "lib/lexer.ml"

  | 2 ->
# 75 "lib/lexer.mll"
         (raise (Lex_err("Eof within comment",get_ln())))
# 310 "lib/lexer.ml"

  | 3 ->
# 76 "lib/lexer.mll"
          (incr_ln(); comment lexbuf)
# 315 "lib/lexer.ml"

  | 4 ->
# 77 "lib/lexer.mll"
            (incr_ln(); comment lexbuf)
# 320 "lib/lexer.ml"

  | 5 ->
# 78 "lib/lexer.mll"
         (comment lexbuf)
# 325 "lib/lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_comment_rec lexbuf __ocaml_lex_state

;;

