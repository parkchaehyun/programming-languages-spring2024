[Header]
open K_
open K
open Unix

let test_run pgm_str = 
  let pgm = Parser.program Lexer.start (Lexing.from_string pgm_str) in
  K.run (K.emptyMemory, K.emptyEnv, pgm)

let test_error_str pgm_str = 
  let pgm = Parser.program Lexer.start (Lexing.from_string pgm_str) in
  try 
    (try let _ =  K.run (K.emptyMemory, K.emptyEnv, pgm) in "" with
    K.Error s -> String.sub s 0 7)
  with Invalid_argument _ -> ""

let redirect_f = "stdout_redirect.txt"

let test_output pgm_str = 
  (* Stdout Redirection *)
  let new_stdout = open_out redirect_f in
  let _ = Unix.dup2 (Unix.descr_of_out_channel new_stdout) Unix.stdout in
  let pgm = Parser.program Lexer.start (Lexing.from_string pgm_str) in
  let _ = K.run (K.emptyMemory, K.emptyEnv, pgm) in
  let _ = flush_all() in (* Current stdout channel must be flushed *)
  let _ = close_out new_stdout in 

  let result_chan = open_in redirect_f in
  really_input_string result_chan (in_channel_length result_chan)


[Test]
(* 0. unbound procedure *)
test_error_str
"
let proc f(x) = x + 1 in
g(1)
"

[Value]
"Unbound"


[Test]
(* 1. unbound field *)
test_error_str
"
let x := { car := 1 } in
write x.cdr
"

[Value]
"Unbound"


[Test]
(* 2. record i *)
test_output
"write ({ car := true, cdr := 5 }.cdr)"

[Value]
"5\n"

[Test]
(* 3. record ii *)
test_output
"
let x := { car := true, cdr := 3 } in
x.car := 4;
write x.car
"

[Value]
"4\n"


[Test]
(* 4. CBV *)
test_output
"
let proc f(x, y, z) = (x + y) / z in
write (f (2, 3, 5))
"

[Value]
"1\n"


[Test]
(* 5. recursion *)
test_output
"
let proc f(x) =
  if (x < 1) then 1 else (x * f(x-1))
in
write (f(5))
"

[Value]
"120\n"


[Test]
(* 6. recursion ii *)
test_output
"
let proc f(x) =
  if x = 0 then x else x := f(x - 1)
in
let x := 10 in
f<x>;
write x
"

[Value]
"0\n"


[Test]
(* 7. CBV + CBR *)
test_output
"
let proc f(x) = x := 3 in
let x := 1 in
let y := 2 in
f<x>; f(y);
write (x + y)
"

[Value]
"5\n"


[Test]
(* 8. empty record *)
test_output "if {} = unit then write 1 else write 2"

[Value]
"1\n"


[Test]
(* 9. complex record *)
test_output
"
let x := { i1 := 1, i2 := 2, i3 := { ii1 := true, ii2 := unit } } in
if x.i3.ii1 = unit then write 100 else write 200
"

[Value]
"200\n"


[Test]
(* 10. argument evaluation order *)
test_output
"
let x := 1 in
let proc f(x, y, z) = x * y + z in
write (f(x := x + 1, x := x + 1, x := x + 1))
"

[Value]
"10\n"


[Test]
(* 11. CBR *)
test_output
"
let x := 1 in
let proc f(x, y, z) =
  x := x + (y := y + 1) + (z := z + 1)
in
f<x, x, x>;
write x
"

[Value]
"6\n"


[Test]
(* 12. scoping i *)
test_output
"
let proc f(x) = x + 1 in
let f := 2 in
write (f + f)
"

[Value]
"4\n"


[Test]
(* 13. invalid function call *)
test_error_str
"
let proc f(x, y, z) = x + y + z in
  f (1, 2, 3) +
    let proc f(x, y) = x + y in f (1, 2, 3)
"

[Value]
"Invalid"


[Test]
(* 14. scoping ii *)
test_output
"
let x := 1 in
let y := 5 in
let proc f(z) =
  if z then x := x + 1 else y := y - 2
in
let x := 10 in
let y := 50 in
let proc g(z) =
  if z then x := x + 5 else y := y - 10
in
write (g(true) + g(false) + x + y + f(true) + f(false) + x + y)
"

[Value]
"170\n"


[Test]
(* 15. mutually recursive McCarthy 91 *)
test_output
"
let m'_calls := 0 in
let m''_calls := 0 in

let proc incr(x) =
  x := x + 1
in

let proc M(n) =
  let proc M'(n, c) =
    incr<m'_calls>;
    let proc M''(n, c) =
      incr<m''_calls>;
      if c = 0 then
        n
      else
        M'(n, c - 1)
    in
    if 100 < n then
      M''(n - 10, c)
    else
      M'(n + 11, c + 1)
  in
  M'(n, 0)
in

let n := 87 in
n := M(n);
write n;
write m'_calls;
write m''_calls
"

[Value]
"91\n29\n15\n"


[Test]
(* 16. Tak function *)
test_output
"
let calls := 0 in

let proc incr(x) =
  x := x + 1
in

let proc sqr(x) =
  x * x
in

let proc tak(x, y, z) =
  incr<calls>;
  if (not (y < x)) then
    y
  else
    tak(tak(x - 1, y, z), tak(y - 1, z, x), tak(z - 1, x, y))
in

let x := 7 in
let y := 2 in
write (sqr(x - tak(x, y, 0)) + sqr(x - tak(y, 0, x)));
write (calls)
"

[Value]
"0\n3338\n"


[Test]
(* 17. reverse *)
test_output
"
let nil := unit in
let proc cons(x, l) =
  { car := x, cdr := l }
in

let proc rev(l) =
  let proc rev_aux(l, r) =
    if l = nil then
      r
    else
      rev_aux(l.cdr, cons(l.car, r))
  in
  rev_aux(l, nil)
in

let l := cons(3, cons(1, cons(4, nil))) in
let l := rev(l) in
write l.car
"

[Value]
"4\n"


[Test]
(* 18. leftist heap *)
test_output
"
let empty := unit in

let proc rank(h) =
  if h = empty then
    -1
  else
    h.rank
in

let proc shake(x, lh, rh) =
  if rank(lh) < rank(rh) then
    { rank := rank(lh) + 1, value := x, left := rh, right := lh }
  else
    { rank := rank(rh) + 1, value := x, left := lh, right := rh }
in

let proc merge(lh, rh) =
  if lh = empty then
    rh
  else if rh = empty then
    lh
  else
    let lx := lh.value in
    let rx := rh.value in
    if rx < lx then
      merge(rh, lh)
    else
      shake(lx, lh.left, merge(lh.right, rh))
in
let proc insert(x, h) =
  merge(h, { rank := 0, value := x, left := empty, right := empty })
in
let proc findMin(h) =
  h.value
in

let proc deleteMin(h) =
  merge(h.left, h.right)
in

let t := insert(25, insert(34, insert(9, insert(11, empty)))) in
write (findMin(t) + findMin(deleteMin(t)))
"

[Value]
"20\n"


[Test]
(* 19. queue = 2 stacks, remember? *)
test_output
"
let proc and(b1, b2) =
  if b1 then b2 else false
in

let nil := unit in
let proc cons(x, l) =
  { car := x, cdr := l }
in

let proc rev(l) =
  let proc rev_aux(l, r) =
    if l = nil then
      r
    else
      rev_aux(l.cdr, cons(l.car, r))
  in
  rev_aux(l, nil)
in
let emptyQ := { car := nil, cdr := nil } in
let proc enQ(q, e) =
  { car := cons(e, q.car), cdr := q.cdr }
in
let proc deQ(q) =
  if and(q.car = nil, q.cdr = nil) then
    unit
  else
    if q.cdr = nil then
      let l := rev(q.car) in
      { car := l.car, cdr := { car := nil, cdr := l.cdr } }
    else
      { car := q.cdr.car, cdr := { car := q.car, cdr := q.cdr.cdr } }
in
let proc deQQ(q) =
  deQ(q).cdr
in
let proc deQV(q) =
  deQ(q).car
in

let l1 := { car := 1, cdr := nil } in
let l2 := { car := 2, cdr := nil } in
let l3 := { car := 3, cdr := nil } in
let l4 := { car := 4, cdr := nil } in
let q := enQ(enQ(enQ(enQ(emptyQ, l1), l2), l3), l4) in
write deQV(deQQ(enQ(deQQ(enQ(deQQ(q), l1)), l2))).car
"

[Value]
"4\n"
