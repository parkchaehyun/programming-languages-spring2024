[Header]
open Sm5.Machine

(* Set the Sm5.gc_mode flag *)

let _ = gc_mode := true

let stdout_redirect_f = "stdout_redirect.txt"

let read_all filename = 
  let chan = open_in filename in 
  let res = really_input_string chan (in_channel_length chan) in
  let _ = close_in chan in 
  res

let check_value cmd expect =
  (* Redirect standard output *)
  let new_stdout = open_out stdout_redirect_f in
  let _ = Unix.dup2 (Unix.descr_of_out_channel new_stdout) Unix.stdout in
  let _ = run cmd in
  let res = read_all stdout_redirect_f in
  res = expect

let check_exception cmd = 
  try let _ = run cmd in false with GC_Failure -> true

(* concat command n times *)
let append (n: int) (f: int -> command) (cmd: command) : command =
  let rec iter i =
    if i = n then []
    else (f i) @ iter (i + 1) in cmd @ (iter 0)

[Test]
(* 1. Simple malloc & use : trigger gc and fail *)
let cmds1 =
  let cmds = append 129 (fun i -> 
    let value = Printf.sprintf "x%d" i in [
        MALLOC; 
        BIND value; 
        PUSH (Val (Z i));
        PUSH (Id value);
        STORE;
      ])
    [] 
  in

  (* Access all the allocated memory locations, ensuring they must not have been collected *)
    let cmds = append 128 (fun i -> 
        let value = Printf.sprintf "x%d" i in [
            PUSH (Id value);
            LOAD;
            POP;
         ]) cmds in

    cmds
in
check_exception cmds1

[Value]
true

[Test]
(* 2. Simple malloc & use : trigger gc and success *)
let cmds2 = 
    (* To be collected *)
    let cmds = [
        PUSH (Val (Z 1));
        MALLOC;
        STORE;
    ] in

    let cmds = append 127 (fun i -> 
        let v = Printf.sprintf "x%d" i in [
            MALLOC; 
            BIND v; 
            PUSH (Val (Z 1));
            PUSH (Id v);
            STORE;
        ]) cmds in

    (* Trigger GC *)
    let cmds = cmds @ [
        MALLOC;
        BIND "x_new";
        PUSH (Val (Z 50));
        PUSH (Val (Z 10));
        ADD;
        PUSH (Id "x_new");
        STORE;

        PUSH (Id "x_new");
        LOAD;
    ] in

    (* Check if allocated memory location's values are not affected by GC() *)
    let cmds = append 127 (fun i -> 
        let v = Printf.sprintf "x%d" i in [
            PUSH (Id v);
            LOAD;
            ADD;
         ]) cmds in 

    let cmds = cmds @ [PUT] in

    cmds
in
check_value cmds2 "187\n"

[Value]
true

[Test]
(* 3. GC must be able to track the location chain : gc fail *) 
let cmds3 = 
  let cmds = [
    MALLOC; 
    BIND "start";
    PUSH (Id "start");
    BIND "cur"; 
  ] in

  let cmds = append 127 (fun _ -> 
    [
      MALLOC;
      PUSH (Id "cur");
      STORE;

      PUSH (Id "cur");
      LOAD;

      UNBIND;
      POP;

      BIND "cur";
    ]) cmds in

  let cmds = cmds @ [PUSH (Val (Z 100)); PUSH (Id "cur"); STORE] in

  (* Trigger GC *)
  let cmds = cmds @ [
    MALLOC;
    BIND "foo";
    PUSH (Val (Z 1));
    PUSH (Id "foo");
    STORE
    ]
  in

  let cmds = cmds @ [PUSH (Val (Z 1)); PUSH (Id "start")] in

  (* Access all the allocated memory locations, ensuring they must not have been collected *)
  let cmds = append 127 (fun _ ->
    [LOAD;]
    ) cmds 
  in
  
  cmds @ [STORE]
in
check_exception cmds3

[Value]
true

[Test]
(* 4. Gc must be able to track the location chain : gc success *)

let cmds4 = 
  (* To be collected *)
  let cmds = [
      PUSH (Val (Z 1));
      MALLOC;
      STORE;
  ] in

  let cmds = cmds @ [
    MALLOC; 
    BIND "start";
    PUSH (Id "start");
    BIND "cur"; 
  ] in

  (* 126 times instead of 127 *)
  let cmds = append 126 (fun _ -> 
    [
      MALLOC;
      PUSH (Id "cur");
      STORE;

      PUSH (Id "cur");
      LOAD;

      UNBIND;
      POP;

      BIND "cur";
    ]) cmds in

  let cmds = cmds @ [PUSH (Val (Z 99)); PUSH (Id "cur"); STORE] in

  (* Trigger GC *)
  let cmds = cmds @ [
    MALLOC;
    BIND "foo";
    PUSH (Val (Z 1));
    PUSH (Id "foo");
    STORE
    ]
  in

  let cmds = cmds @ [PUSH (Id "start")] in

  (* Access all the allocated memory locations, ensuring they must not have been collected *)
  let cmds = append 126 (fun _ ->
    [LOAD;]
    ) cmds 
  in
  
  cmds @ [LOAD; PUT]
in
check_value cmds4 "99\n"

[Value]
true

[Test]
(* 5. Alternatedly : gc success *) 
let cmds5 =
    (* Trigger GC *)
    let cmds =
    append 128 (fun i -> 
        let v = Printf.sprintf "x%d" i in [
            (* To be collected *)
            PUSH (Val (Z 1));
            MALLOC;
            STORE;
            
            (* Not to be collected *)
            MALLOC;
            BIND v;
            PUSH (Val (Z 10));
            PUSH (Id v);
            STORE
            ])
    [] in

    (* Check if allocated memory location's values are not affected by GC() *)
    let cmds =
    append 128 
      (fun i -> 
        let v = Printf.sprintf "x%d" i in [
            PUSH (Id v);
            LOAD;
            ADD;
            ]
      ) (cmds @ [PUSH (Val (Z 0))])
    in

    let cmds = cmds @ [PUT] in

    cmds
in
check_value cmds5 "1280\n"

[Value]
true

[Test]
(* 6. Alternatedly : gc fail *)
let cmds6 =
  (* Trigger GC *)
  let cmds =
  append 128 (fun i -> 
    let v = Printf.sprintf "x%d" i in [
      (* Not to be collected *)
      MALLOC;
      BIND v;
      PUSH (Val (Z 1));
      PUSH (Id v);
      STORE;

      (* To be collected *)
      PUSH (Val (Z 1));
      MALLOC;
      STORE
      ])
  [] in

  (* Check if allocated memory location's values are not affected by GC() *)
  let cmds =
  append 128 
    (fun i -> 
      let v = Printf.sprintf "x%d" i in [
        PUSH (Id v);
        LOAD;
        ADD;
        ]
    ) (cmds @ [PUSH (Val (Z 0))])
  in

  let cmds = cmds @ [PUT] in

  cmds
in
check_exception cmds6

[Value]
true


[Test]
(* 7. Gc must be able to track record : gc fail *)
let cmds7 =
  let cmds = append 124 (fun i -> 
      let v = Printf.sprintf "x%d" i in [
        MALLOC; 
        BIND v; 
        PUSH (Val (Z i));
        PUSH (Id v);
        STORE;
      ])
  [] in

  let cmds = cmds @ [
    MALLOC;
    BIND "x";
    PUSH (Val (Z 100));
    PUSH (Id "x");
    STORE;

    MALLOC;
    BIND "loc_field";
    PUSH (Id "x");
    PUSH (Id "loc_field");
    STORE;
    UNBIND;

    MALLOC;
    BIND "z_field";
    PUSH (Val (Z 200));
    PUSH (Id "z_field");
    STORE;

    UNBIND;
    BOX 2;

    MALLOC;
    BIND "box";

    PUSH (Id "box"); 
    STORE; 

    (* Trigger GC *)
    PUSH (Val (Z 1));
    MALLOC;
    STORE;
  ] in

  (* Access all the allocated memory locations, ensuring they must not have been collected *)
  let cmds = append 124 (fun i -> 
      let v = Printf.sprintf "x%d" i in [
          PUSH (Id v);
          LOAD;
          POP;
       ]) cmds
  in 
  
  let cmds = cmds @ [
    PUSH (Id "box"); 
    LOAD; 
    UNBOX "z_field"; 
    LOAD;
    PUT;
    ] 
  in
  let cmds = cmds @ [
    PUSH (Id "box"); 
    LOAD; 
    UNBOX "loc_field"; 
    LOAD;
    LOAD;
    PUT;
    ] 
  in
  cmds
in
check_exception cmds7

[Value]
true

[Test]
(* 8. Gc must be able to track record : gc success *)
let cmds8 =
  let cmds = append 123 (fun i -> 
      let v = Printf.sprintf "x%d" i in [
        MALLOC; 
        BIND v; 
        PUSH (Val (Z i));
        PUSH (Id v);
        STORE;
      ])
  [] in

  let cmds = cmds @ [
    MALLOC;
    BIND "x";
    PUSH (Val (Z 100));
    PUSH (Id "x");
    STORE;

    MALLOC;
    BIND "loc_field";
    PUSH (Id "x");
    PUSH (Id "loc_field");
    STORE;
    UNBIND;

    MALLOC;
    BIND "z_field";
    PUSH (Val (Z 200));
    PUSH (Id "z_field");
    STORE;

    UNBIND;
    BOX 2;

    MALLOC;
    BIND "box";

    PUSH (Id "box"); 
    STORE; 

    (* Trigger GC *)
    PUSH (Val (Z 1));
    MALLOC;
    STORE;
  ] in

  (* Access all the allocated memory locations, ensuring they must not have been collected *)
  let cmds = append 123 (fun i -> 
      let v = Printf.sprintf "x%d" i in [
          PUSH (Id v);
          LOAD;
          POP;
       ]) cmds
  in 
  
  let cmds = cmds @ [
    PUSH (Id "box"); 
    LOAD; 
    UNBOX "loc_field"; 
    LOAD;
    LOAD;
    PUT;
    ] 
  in

  let cmds = cmds @ [
    PUSH (Id "box"); 
    LOAD; 
    UNBOX "z_field"; 
    LOAD;
    PUT;
    ] 
  in

  cmds
in
check_value cmds8 "100\n200\n"

[Value]
true

[Test]
(* 9. Location allocated in function can be collected in 2nd call : gc success *)
let cmds9 = 
    let cmds = [
        PUSH (Fn ("x", [
            (* Trigger GC / At the same time, to be collected in the second call *)
            MALLOC;
            BIND "local"; 
            PUSH (Val (Z 1));
            PUSH (Id "local");
            STORE;

            (* Access argument location, ensuring it must not have been collected *)
            PUSH (Id "x");
            LOAD;
            POP;
        ]));

        BIND "f";
    ] in

    let cmds = append 126 (fun i -> 
        let v = Printf.sprintf "x%d" i in [
            MALLOC; 
            BIND v; 
            PUSH (Val (Z 2));
            PUSH (Id v);
            STORE;
        ]) cmds in

    let cmds = cmds @ [
        MALLOC;
        BIND "arg";

        (* First Call *)
        PUSH (Id "f");
        PUSH (Val (Z 1));
        PUSH (Id "arg");
        CALL;

        (* Second Call *)
        PUSH (Id "f");
        PUSH (Val (Z 2));
        PUSH (Id "arg");
        CALL;
    ] in

    (* Check if allocated memory location's values are not affected by GC() *)
    let cmds = 
      append 126 
        (fun i -> 
          let v = Printf.sprintf "x%d" i in 
            [PUSH (Id v);
            LOAD;
            ADD]
        ) (cmds @ [PUSH (Val (Z 0));]) in 

    let cmds = cmds @ [PUT] in
    cmds
in
check_value cmds9 "252\n"

[Value]
true

[Test]
(* 10. Location allocated in function can be collected in 2nd call : gc fail *)
let cmds10 = 
    let cmds = [
        PUSH (Fn ("x", [
            (* Trigger GC / At the same time, to be collected in the second call *)
            MALLOC;
            BIND "local"; 
            PUSH (Val (Z 1));
            PUSH (Id "local");
            STORE;

            (* Access argument location, ensuring it must not have been collected *)
            PUSH (Id "x");
            LOAD;
            POP;
        ]));

        BIND "f";
    ] in

    let cmds = append 126 (fun i -> 
        let v = Printf.sprintf "x%d" i in [
            MALLOC; 
            BIND v; 
            PUSH (Val (Z 2));
            PUSH (Id v);
            STORE;
        ]) cmds in

    let cmds = cmds @ [
        MALLOC;
        BIND "arg";

        (* First Call *)
        PUSH (Id "f");
        PUSH (Val (Z 1));
        PUSH (Id "arg");
        CALL;

        (* Allocate and bind new loc *)
        MALLOC; 
        BIND "tmp"; 
        PUSH (Val (Z 3));
        PUSH (Id "tmp");
        STORE;

        (* Second Call *)
        PUSH (Id "f");
        PUSH (Val (Z 2));
        PUSH (Id "arg");
        CALL;
    ] in

    (* Check if allocated memory location's values are not affected by GC() *)
    let cmds = 
      append 126 
        (fun i -> 
          let v = Printf.sprintf "x%d" i in 
            [PUSH (Id v);
            LOAD;
            ADD]
        ) (cmds @ [PUSH (Val (Z 0));]) in 

    let cmds = cmds @ [
      PUSH (Id "tmp");
      LOAD;
      ADD;
      PUT
      ] 
    in
    cmds
in
check_exception cmds10

[Value]
true
