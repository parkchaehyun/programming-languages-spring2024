# 6 "lib/lexer.mll"
 
open Parser

exception Eof
exception LexicalError

let verbose1 s = (* (print_string s; print_newline(); s) *) s
let verbose2 _ = (* (print_string s; print_newline()) *) ()
let comment_depth = ref 0
let keyword_tbl = Hashtbl.create 31

let _ =
  List.iter
    (fun (keyword, tok) -> Hashtbl.add keyword_tbl keyword tok)
    [
      ("unit", UNIT);
      ("true", TRUE);
      ("false", FALSE);
      ("not", NOT);
      ("if", IF);
      ("then", THEN);
      ("else", ELSE);
      ("let", LET);
      ("in", IN);
      ("end", END);
      ("proc", PROC);
      ("while", WHILE);
      ("do", DO);
      ("for", FOR);
      ("to", TO);
      ("read", READ);
      ("write", WRITE);
    ]

# 37 "lib/lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\237\255\238\255\239\255\241\255\002\000\243\255\244\255\
    \245\255\246\255\247\255\248\255\249\255\250\255\251\255\084\000\
    \159\000\002\000\002\000\254\255\242\255\052\000\252\255\253\255\
    \005\000\022\000\255\255\254\255";
  Lexing.lex_backtrk = 
   "\255\255\255\255\255\255\255\255\255\255\018\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\003\000\
    \002\000\015\000\000\000\255\255\255\255\255\255\255\255\255\255\
    \003\000\003\000\255\255\255\255";
  Lexing.lex_default = 
   "\001\000\000\000\000\000\000\000\000\000\255\255\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255\
    \255\255\255\255\255\255\000\000\000\000\022\000\000\000\000\000\
    \255\255\255\255\000\000\000\000";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\018\000\018\000\018\000\018\000\018\000\000\000\018\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \018\000\000\000\018\000\000\000\000\000\000\000\000\000\000\000\
    \017\000\003\000\012\000\014\000\019\000\013\000\027\000\011\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\005\000\004\000\009\000\010\000\008\000\020\000\
    \026\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\006\000\025\000\007\000\024\000\000\000\
    \000\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\000\000\
    \000\000\000\000\000\000\015\000\000\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\023\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    ";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\018\000\018\000\000\000\255\255\018\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\018\000\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\000\000\017\000\000\000\024\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\005\000\
    \025\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\021\000\000\000\021\000\255\255\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\015\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\255\255\
    \255\255\255\255\255\255\015\000\255\255\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\021\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    ";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec start lexbuf =
    __ocaml_lex_start_rec lexbuf 0
and __ocaml_lex_start_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 46 "lib/lexer.mll"
          ( start lexbuf )
# 183 "lib/lexer.ml"

  | 1 ->
# 47 "lib/lexer.mll"
         ( comment_depth :=1;
           comment lexbuf;
           start lexbuf )
# 190 "lib/lexer.ml"

  | 2 ->
# 50 "lib/lexer.mll"
           ( NUM (int_of_string (verbose1 (Lexing.lexeme lexbuf))) )
# 195 "lib/lexer.ml"

  | 3 ->
# 51 "lib/lexer.mll"
       ( let id = verbose1 (Lexing.lexeme lexbuf)
         in try Hashtbl.find keyword_tbl id
            with _ -> ID id )
# 202 "lib/lexer.ml"

  | 4 ->
# 54 "lib/lexer.mll"
        ( verbose2 "+"; PLUS )
# 207 "lib/lexer.ml"

  | 5 ->
# 55 "lib/lexer.mll"
        ( verbose2 "-";MINUS )
# 212 "lib/lexer.ml"

  | 6 ->
# 56 "lib/lexer.mll"
        ( verbose2 "*"; STAR )
# 217 "lib/lexer.ml"

  | 7 ->
# 57 "lib/lexer.mll"
        ( verbose2 "/"; SLASH )
# 222 "lib/lexer.ml"

  | 8 ->
# 58 "lib/lexer.mll"
        ( verbose2 "="; EQUAL )
# 227 "lib/lexer.ml"

  | 9 ->
# 59 "lib/lexer.mll"
        ( verbose2 "<"; LB )
# 232 "lib/lexer.ml"

  | 10 ->
# 60 "lib/lexer.mll"
        ( verbose2 ">"; RB )
# 237 "lib/lexer.ml"

  | 11 ->
# 61 "lib/lexer.mll"
        ( verbose2 "]"; RBLOCK )
# 242 "lib/lexer.ml"

  | 12 ->
# 62 "lib/lexer.mll"
        ( verbose2 "["; LBLOCK )
# 247 "lib/lexer.ml"

  | 13 ->
# 63 "lib/lexer.mll"
         ( verbose2 ":="; COLONEQ )
# 252 "lib/lexer.ml"

  | 14 ->
# 64 "lib/lexer.mll"
        ( verbose2 ";"; SEMICOLON )
# 257 "lib/lexer.ml"

  | 15 ->
# 65 "lib/lexer.mll"
        ( verbose2 "("; LP )
# 262 "lib/lexer.ml"

  | 16 ->
# 66 "lib/lexer.mll"
        ( verbose2 ")"; RP )
# 267 "lib/lexer.ml"

  | 17 ->
# 67 "lib/lexer.mll"
        ( verbose2 "eof"; EOF)
# 272 "lib/lexer.ml"

  | 18 ->
# 68 "lib/lexer.mll"
      ( raise LexicalError)
# 277 "lib/lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_start_rec lexbuf __ocaml_lex_state

and comment lexbuf =
    __ocaml_lex_comment_rec lexbuf 21
and __ocaml_lex_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 70 "lib/lexer.mll"
         ( comment_depth := !comment_depth+1; comment lexbuf )
# 289 "lib/lexer.ml"

  | 1 ->
# 71 "lib/lexer.mll"
         ( comment_depth := !comment_depth-1;
          if !comment_depth > 0 then comment lexbuf )
# 295 "lib/lexer.ml"

  | 2 ->
# 73 "lib/lexer.mll"
        ( raise Eof )
# 300 "lib/lexer.ml"

  | 3 ->
# 74 "lib/lexer.mll"
        ( comment lexbuf )
# 305 "lib/lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_comment_rec lexbuf __ocaml_lex_state

;;

